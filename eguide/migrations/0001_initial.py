# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import django.utils.timezone
import django.core.validators


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='EguideUser',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(default=django.utils.timezone.now, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', unique=True, max_length=30, verbose_name='username', validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username.', 'invalid')])),
                ('first_name', models.CharField(max_length=30, verbose_name='first name', blank=True)),
                ('last_name', models.CharField(max_length=30, verbose_name='last name', blank=True)),
                ('email', models.EmailField(max_length=75, verbose_name='email address', blank=True)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('age', models.CharField(blank=True, max_length=400, null=True, verbose_name=b'Age', choices=[(b'Under 18', b'Under 18'), (b'18-25', b'18-25'), (b'26-29', b'26-29'), (b'30-39', b'30-39'), (b'40-49', b'40-49'), (b'50-59', b'50-59'), (b'Over 60', b'Over 60')])),
                ('gender', models.CharField(blank=True, max_length=400, null=True, verbose_name=b'Gender', choices=[(b'Male', b'Female'), (b'Female', b'Male')])),
                ('education', models.CharField(blank=True, max_length=400, null=True, verbose_name=b'Education', choices=[(b'Grammar/Middle School', b'Grammar/Middle School'), (b'High School Diploma', b'High School Diploma'), (b'Some College', b'Some College'), (b"Bachelor's Degree", b"Bachelor's Degree"), (b'Some Graduate School', b'Some Graduate School'), (b'Graduate Degree', b'Graduate Degree'), (b'PhD', b'PhD'), (b'Other', b'Other')])),
                ('country_name', models.CharField(max_length=250, null=True, verbose_name=b'Where are you from?', blank=True)),
                ('occupation', models.CharField(blank=True, max_length=400, null=True, verbose_name=b'Occupation', choices=[(b'Accounting/Finance', b'Accounting/Finance'), (b'Executive/Senior Management', b'Executive/Senior Management'), (b'Professional/Managerial', b'Professional/Managerial'), (b'Technical/Engineering', b'Technical/Engineering'), (b'Administrative/Secretarial', b'Administrative/Secretarial'), (b'Sales/Marketing/Advertising', b'Sales/Marketing/Advertising'), (b'Customer Service/Support', b'Customer Service/Support'), (b'College/University Faculty', b'College/University Faculty'), (b'College/University Student', b'College/University Student'), (b'K-12 Student', b'K-12 Student'), (b'Writer/Journalist', b'Writer/Journalist'), (b'Homemaker', b'Homemaker'), (b'Retired', b'Retired'), (b'Currently Not Employed', b'Currently Not Employed'), (b'Other', b'Other')])),
                ('organization', models.CharField(max_length=400, null=True, verbose_name=b'Organization', blank=True)),
                ('organization_type', models.CharField(blank=True, max_length=400, null=True, verbose_name=b'Organization Type', choices=[(b'Advertising/Media/Public Relation', b'Advertising/Media/Public Relation'), (b'Agriculture/Forestry', b'Agriculture/Forestry'), (b'Agriculture/Forestry', b'Agriculture/Forestry'), (b'Architecture/Engineering/Construction', b'Architecture/Engineering/Construction'), (b'Consulting', b'Consulting'), (b'Entertainment', b'Entertainment'), (b'Finance/Banking/Accounting', b'Finance/Banking/Accounting'), (b'Government', b'Government'), (b'Hospitality/Travel', b'Hospitality/Travel'), (b'Internet-Related Services', b'Internet-Related Services'), (b'Legal Services', b'Legal Services'), (b'Manufacturing/distribution', b'Manufacturing/distribution'), (b'Marketing/Communications', b'Marketing/Communications'), (b'Medical Services', b'Medical Services'), (b'Nonprofit', b'Nonprofit'), (b'Printing/Graphics', b'Printing/Graphics'), (b'Sales', b'Sales'), (b'Software Development', b'Software Development'), (b'Television/Radio/Print Publishing', b'Television/Radio/Print Publishing'), (b'Transportation/Utilities', b'Transportation/Utilities'), (b'Wholesale/Retail', b'Wholesale/Retail'), (b'Other', b'Other')])),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('active', models.BooleanField(default=False, verbose_name=b'Enabled?')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text=b'e.g. Ernest Hemingway', max_length=250, verbose_name=b'Author Full Name')),
                ('email', models.CharField(help_text=b'e.g. hemingway@gmail.com', max_length=350, null=True, verbose_name=b"Author's Email Address", blank=True)),
                ('biography', models.TextField(null=True, verbose_name=b'Short Biography', blank=True)),
            ],
            options={
                'ordering': ['name'],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Candidate_votes',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('active', models.BooleanField(default=False, verbose_name=b'Enabled?')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('votes', models.IntegerField(help_text=b'Votes for this candidate with no commas or separators, e.g. 39456123', null=True, verbose_name=b'Votes', blank=True)),
                ('percentage', models.DecimalField(decimal_places=2, max_digits=12, blank=True, help_text=b'Percentage of votes for this candidate with no commas and only two decimals, e.g. 23.12', null=True, verbose_name=b'Percentage')),
                ('legacy_id', models.IntegerField(null=True, blank=True)),
            ],
            options={
                'verbose_name': 'Candidate Vote',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('active', models.BooleanField(default=False, verbose_name=b'Enabled?')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=250, verbose_name=b'Category Name')),
                ('slug', models.CharField(unique=True, max_length=255, verbose_name=b'Slug')),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'Categories',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('active', models.BooleanField(default=False, verbose_name=b'Enabled?')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text=b'Provision choice, e.g. Yes', max_length=250, verbose_name=b'Provision choice')),
                ('votes', models.IntegerField(help_text=b'Votes for this choice with no commas or separators, e.g. 39456123', null=True, verbose_name=b'Votes', blank=True)),
                ('percentage', models.DecimalField(decimal_places=2, max_digits=12, blank=True, help_text=b'Percentage of votes for this choice with no commas and only two decimals, e.g. 23.12', null=True, verbose_name=b'Precentage')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('active', models.BooleanField(default=False, verbose_name=b'Enabled?')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text=b'e.g. France', max_length=200, verbose_name=b'Country Name', db_index=True)),
                ('official_name', models.CharField(help_text=b'e.g. French Republic', max_length=400, verbose_name=b'Official Name', blank=True)),
                ('flag', models.ImageField(help_text=b'Upload the flag. Accepted image files are JPG, PNG and GIF', upload_to=b'flags', verbose_name=b'Flag File', blank=True)),
                ('population', models.IntegerField(help_text=b'Population must be entered as numbers with no commas or separators, e.g. 39456123', null=True, verbose_name=b'Population', blank=True)),
                ('population_date', models.DateField(help_text=b'The date the population is retrieved', null=True, verbose_name=b'Population Date', blank=True)),
                ('population_source', models.TextField(help_text=b"The source this population is retrieved from. If it's a URL make sure to hyperlink the URL", verbose_name=b'Population Source', blank=True)),
                ('description', models.TextField(verbose_name=b'Description', blank=True)),
                ('alpha2', models.CharField(max_length=2, verbose_name=b'ISO ALPHA-2 Code', blank=True)),
                ('alpha3', models.CharField(max_length=3, verbose_name=b'ISO ALPHA-3 Code')),
                ('code', models.CharField(max_length=3, null=True, verbose_name=b'Country Name', blank=True)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name': 'Country',
                'verbose_name_plural': 'Countries',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Digest',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('active', models.BooleanField(default=False, verbose_name=b'Enabled?')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=250, verbose_name=b'Title')),
                ('slug', models.CharField(unique=True, max_length=255, verbose_name=b'slug')),
                ('body', models.TextField(null=True, verbose_name=b'Body', blank=True)),
                ('excerpt', models.TextField(null=True, verbose_name=b'Excerpt', blank=True)),
                ('post_date', models.DateTimeField(verbose_name=b'Date Posted')),
                ('post_modified', models.DateTimeField(verbose_name=b'Date Modified')),
                ('image', models.ImageField(help_text=b'Accepted image files are JPG, PNG and GIF', upload_to=b'digest', verbose_name=b'Image')),
                ('author', models.ForeignKey(to='eguide.Author')),
                ('category', models.ManyToManyField(to='eguide.Category', null=True, blank=True)),
                ('country', models.ManyToManyField(to='eguide.Country', blank=True)),
            ],
            options={
                'ordering': ['-post_date'],
                'verbose_name_plural': 'Digest',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Election',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('active', models.BooleanField(default=False, verbose_name=b'Enabled?')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text=b'Name of the election, e.g. Parliamentary elections round 1', max_length=250, verbose_name=b'Election Name')),
                ('date', models.DateField(db_index=True, null=True, verbose_name=b'Election Date', blank=True)),
                ('description', models.TextField(verbose_name=b'Description', blank=True)),
                ('registered_voters', models.IntegerField(help_text=b'Number of registered voters with no commas or separators, e.g. 39456123', null=True, verbose_name=b'Registered Voters', blank=True)),
                ('registered_voters_date', models.DateField(help_text=b'The date the number of egistered voters is retrieved', null=True, verbose_name=b'Date Obtained', blank=True)),
                ('registered_voters_source', models.TextField(help_text=b"The source the registered voters number is retrieved from. If it's a URL make sure to hyperlink the URL", verbose_name=b'Source', blank=True)),
                ('cast_votes', models.IntegerField(help_text=b'Number of cast votes with no commas or separators, e.g. 39456123', null=True, verbose_name=b'Cast Votes', blank=True)),
                ('valid_votes', models.IntegerField(help_text=b'Number of valid votes with no commas or separators, e.g. 39456123', null=True, verbose_name=b'Valid Votes', blank=True)),
                ('invalid_votes', models.IntegerField(help_text=b'Number of invalid votes with no commas or separators, e.g. 39456123', null=True, verbose_name=b'Invalid Votes', blank=True)),
                ('ballot_description', models.TextField(help_text=b'Description of the ballot', null=True, verbose_name=b'Ballot Description', blank=True)),
                ('ballot_file', models.ImageField(help_text=b'Upload the ballot. Accepted image files are JPG, PNG and GIF', upload_to=b'flags', null=True, verbose_name=b'Ballot image file', blank=True)),
                ('election_type_temp', models.IntegerField(null=True, blank=True)),
                ('show_results', models.BooleanField(default=False, verbose_name=b'Show Results?')),
                ('legacy_id', models.IntegerField(null=True, blank=True)),
                ('show_seat_shares', models.BooleanField(default=False, verbose_name=b'Show Seat Shares?')),
                ('country', models.ForeignKey(related_name='election_country', to='eguide.Country')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Election_status',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('active', models.BooleanField(default=False, verbose_name=b'Enabled?')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text=b'Status of the electoin, e.g. tentative', max_length=400, verbose_name=b'Status')),
            ],
            options={
                'verbose_name': 'Election Status',
                'verbose_name_plural': 'Election Statuses',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Election_system',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('active', models.BooleanField(default=False, verbose_name=b'Enabled?')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text=b'Name of the election system, e.g. block vote', max_length=400, verbose_name=b'Election System')),
                ('description', models.TextField(help_text=b'Description of the system', null=True, verbose_name=b'Description', blank=True)),
                ('election', models.BooleanField(default=False, help_text=b'We have non-election systems in this list, such as appointment by president. If it is an election based system, check this box.', verbose_name=b'Is this an election?')),
            ],
            options={
                'verbose_name': 'Election System',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Election_type',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('active', models.BooleanField(default=False, verbose_name=b'Enabled?')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text=b'Status of the electoin, e.g. tentative', max_length=400, verbose_name=b'Status')),
            ],
            options={
                'verbose_name': 'Election Type',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('active', models.BooleanField(default=False, verbose_name=b'Enabled?')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text=b'Name of the instituion, e.g. French Parliament', max_length=250, verbose_name=b'Name')),
                ('foriegn_name', models.CharField(help_text=b'Name in local language, e.g. Parlement francais', max_length=400, null=True, verbose_name=b'Foreign Name', blank=True)),
                ('description', models.TextField(help_text=b'Description of the institution', verbose_name=b'Description', blank=True)),
                ('country', models.ForeignKey(to='eguide.Country')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Institution_type',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('active', models.BooleanField(default=False, verbose_name=b'Enabled?')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text=b'Type of the institution, e.g. lower house', max_length=400, verbose_name=b'Institution Type')),
            ],
            options={
                'verbose_name': 'Institution Type',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Newsletter',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('active', models.BooleanField(default=False, verbose_name=b'Enabled?')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('subject', models.CharField(max_length=400, verbose_name=b"Newsletter's Subject")),
                ('to', models.CharField(max_length=400, verbose_name=b'To:')),
                ('cc', models.CharField(max_length=400, null=True, verbose_name=b'CC:', blank=True)),
                ('bcc', models.CharField(max_length=400, null=True, verbose_name=b'BCC:', blank=True)),
                ('body', models.TextField(verbose_name=b"Newsletter's body")),
                ('status', models.CharField(max_length=250, null=True, verbose_name=b'Status', blank=True)),
                ('delivered', models.IntegerField(null=True, blank=True)),
                ('complained', models.IntegerField(null=True, blank=True)),
                ('clicked', models.IntegerField(null=True, blank=True)),
                ('opened', models.IntegerField(null=True, blank=True)),
                ('dropped', models.IntegerField(null=True, blank=True)),
                ('bounced', models.IntegerField(null=True, blank=True)),
                ('sent', models.IntegerField(null=True, blank=True)),
                ('unsubscribed', models.IntegerField(null=True, blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('active', models.BooleanField(default=False, verbose_name=b'Enabled?')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=250, verbose_name=b'Title')),
                ('slug', models.CharField(unique=True, max_length=250, verbose_name=b'slug')),
                ('body', models.TextField(null=True, verbose_name=b'Body', blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Party',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('active', models.BooleanField(default=False, verbose_name=b'Enabled?')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text=b'Name of the party, e.g. Socialist Party', max_length=250, verbose_name=b'Party Name')),
                ('foreign_name', models.CharField(help_text=b'Name of the party in the local langauge, e.g. Parti socialiste', max_length=400, verbose_name=b'Foreign Name')),
                ('url', models.CharField(help_text=b"Party's official website. make sure to include http:// in front of the address. e.g. http://www.google.com", max_length=400, verbose_name=b'URL', blank=True)),
                ('description', models.TextField(help_text=b'Description of the party', verbose_name=b'Description', blank=True)),
                ('country', models.CharField(max_length=200, verbose_name=b'Country')),
                ('legacy_id', models.IntegerField(unique=True, null=True, blank=True)),
            ],
            options={
                'verbose_name': 'Party',
                'verbose_name_plural': 'Parties',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Party_type',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('active', models.BooleanField(default=False, verbose_name=b'Enabled?')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text=b'Type of the party, e.g. alliance', max_length=400, verbose_name=b'Party Type')),
            ],
            options={
                'verbose_name': 'Party Type',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Party_votes',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('active', models.BooleanField(default=False, verbose_name=b'Enabled?')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('seats_won', models.IntegerField(help_text=b'Number of seats won, e.g. 34', null=True, verbose_name=b'Seats won', blank=True)),
                ('votes', models.IntegerField(help_text=b'Votes for this party with no commas or separators, e.g. 39456123', null=True, verbose_name=b'Votes', blank=True)),
                ('percentage', models.DecimalField(decimal_places=2, max_digits=12, blank=True, help_text=b'Percentage of votes for this choice with no commas and only two decimals, e.g. 23.12', null=True, verbose_name=b'Percentage')),
                ('description', models.TextField(help_text=b'Description of the person', verbose_name=b'Description', blank=True)),
                ('legacy_id', models.IntegerField(null=True, blank=True)),
                ('election', models.ForeignKey(to='eguide.Election')),
                ('party', models.ForeignKey(to='eguide.Party')),
            ],
            options={
                'verbose_name': 'Party Vote',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('active', models.BooleanField(default=False, verbose_name=b'Enabled?')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text=b'Firstname of the person in English, e.g. Vladimir', max_length=250, verbose_name=b'Firstname')),
                ('lastname', models.CharField(help_text=b'Lastname of the person in English, e.g. Putin', max_length=250, verbose_name=b'Lastname')),
                ('url', models.CharField(help_text=b"Person's official website. make sure to include http:// in front of the address. e.g. http://www.google.com", max_length=400, verbose_name=b'URL', blank=True)),
                ('description', models.TextField(help_text=b'Description of the person', verbose_name=b'Description', blank=True)),
                ('country', models.CharField(max_length=200, verbose_name=b'Country')),
                ('legacy_id', models.IntegerField(unique=True, null=True, blank=True)),
                ('party', models.ForeignKey(blank=True, to='eguide.Party', null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Provision_votes',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('active', models.BooleanField(default=False, verbose_name=b'Enabled?')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('provision', models.TextField(help_text=b'Name of the provision in English', verbose_name=b'Referendum question', blank=True)),
                ('comment', models.TextField(verbose_name=b'Comment', blank=True)),
                ('cast_votes', models.IntegerField(help_text=b'Number of cast votes with no commas or separators, e.g. 39456123', null=True, verbose_name=b'Cast Votes', blank=True)),
                ('valid_votes', models.IntegerField(help_text=b'Number of valid votes with no commas or separators, e.g. 39456123', null=True, verbose_name=b'Valid Votes', blank=True)),
                ('invalid_votes', models.IntegerField(help_text=b'Number of invalid votes with no commas or separators, e.g. 39456123', null=True, verbose_name=b'Invalid Votes', blank=True)),
                ('legacy_id', models.IntegerField(null=True, blank=True)),
                ('election', models.ForeignKey(to='eguide.Election')),
            ],
            options={
                'verbose_name': 'Provision',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('active', models.BooleanField(default=False, verbose_name=b'Enabled?')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text=b'e.g. North America', max_length=400, verbose_name=b'Region Name')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.AddField(
            model_name='party',
            name='type',
            field=models.ForeignKey(blank=True, to='eguide.Party_type', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='institution',
            name='institution_type',
            field=models.ForeignKey(to='eguide.Institution_type'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='institution',
            name='system',
            field=models.ForeignKey(blank=True, to='eguide.Election_system', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='election',
            name='election_status',
            field=models.ForeignKey(to='eguide.Election_status'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='election',
            name='election_type',
            field=models.ForeignKey(to='eguide.Election_type'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='election',
            name='institution',
            field=models.ForeignKey(blank=True, to='eguide.Institution', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='country',
            name='region',
            field=models.ForeignKey(to='eguide.Region'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='choice',
            name='provision',
            field=models.ForeignKey(to='eguide.Provision_votes'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='candidate_votes',
            name='candidate',
            field=models.ForeignKey(to='eguide.Person'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='candidate_votes',
            name='election',
            field=models.ForeignKey(to='eguide.Election'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='eguideuser',
            name='favorite_country',
            field=models.ManyToManyField(related_name='fav+', verbose_name=b'Favorite Countries', to='eguide.Country', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='eguideuser',
            name='groups',
            field=models.ManyToManyField(related_query_name='user', related_name='user_set', to='auth.Group', blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of his/her group.', verbose_name='groups'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='eguideuser',
            name='user_permissions',
            field=models.ManyToManyField(related_query_name='user', related_name='user_set', to='auth.Permission', blank=True, help_text='Specific permissions for this user.', verbose_name='user permissions'),
            preserve_default=True,
        ),
    ]
